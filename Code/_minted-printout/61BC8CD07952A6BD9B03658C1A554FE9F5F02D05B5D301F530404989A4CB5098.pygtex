\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cm}{/*}
\PYG{c+cm}{ *  Encoder interaction file, contains functions to read and clear MD25 encoders}
\PYG{c+cm}{ *          Uses inline functions to prevent multiple definitions}
\PYG{c+cm}{ */}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}defines.h\PYGZdq{}}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}Arduino.h\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}Wire.h\PYGZgt{}}

\PYG{c+c1}{// include guard}
\PYG{c+cp}{\PYGZsh{}ifndef ENCODERINTERACTION\PYGZus{}CPP}
\PYG{c+cp}{\PYGZsh{}define ENCODERINTERACTION\PYGZus{}CPP}

\PYG{c+c1}{// find distance a specific wheel has moved}
\PYG{k+kr}{inline} \PYG{k+kt}{int} \PYG{n+nf}{individualDistance}\PYG{p}{(}\PYG{k+kt}{char} \PYG{n}{side}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// set MD25 to send the encoder for the given side}
    \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{beginTransmission}\PYG{p}{(}\PYG{n}{MD25ADDR}\PYG{p}{);}
    \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{write}\PYG{p}{(}\PYG{n}{side}\PYG{p}{);}
    \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{endTransmission}\PYG{p}{();}

    \PYG{c+c1}{// request 4 bytes from the MD25}
    \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{requestFrom}\PYG{p}{(}\PYG{n}{MD25ADDR}\PYG{p}{,} \PYG{l+m+mi}{4}\PYG{p}{);}

    \PYG{c+c1}{// wait for first 4 bytes back}
    \PYG{k}{while} \PYG{p}{(}\PYG{n}{Wire}\PYG{p}{.}\PYG{n}{available}\PYG{p}{()} \PYG{o}{\PYGZlt{}} \PYG{l+m+mi}{4}\PYG{p}{);}

    \PYG{c+c1}{// get all bytes of the click var}
    \PYG{k+kt}{long} \PYG{n}{clicks} \PYG{o}{=} \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{read}\PYG{p}{();}
    \PYG{n}{clicks} \PYG{o}{\PYGZlt{}\PYGZlt{}=} \PYG{l+m+mi}{8}\PYG{p}{;}
    \PYG{n}{clicks} \PYG{o}{+=} \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{read}\PYG{p}{();}
    \PYG{n}{clicks} \PYG{o}{\PYGZlt{}\PYGZlt{}=} \PYG{l+m+mi}{8}\PYG{p}{;}
    \PYG{n}{clicks} \PYG{o}{+=} \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{read}\PYG{p}{();}
    \PYG{n}{clicks} \PYG{o}{\PYGZlt{}\PYGZlt{}=} \PYG{l+m+mi}{8}\PYG{p}{;}
    \PYG{n}{clicks} \PYG{o}{+=} \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{read}\PYG{p}{();}

    \PYG{n}{delay}\PYG{p}{(}\PYG{l+m+mi}{5}\PYG{p}{);}

    \PYG{c+c1}{// convert clicks to mm}
    \PYG{k+kt}{int} \PYG{n}{dist} \PYG{o}{=} \PYG{n}{clicks} \PYG{o}{*} \PYG{n}{CLICKSTOMM}\PYG{p}{;}
    
    \PYG{c+c1}{// return absolute distance moved}
    \PYG{k}{return} \PYG{n}{abs}\PYG{p}{(}\PYG{n}{dist}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}

\PYG{c+c1}{// reset distance encoders between legs}
\PYG{k+kr}{inline} \PYG{k+kt}{void} \PYG{n+nf}{resetEncoders}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{beginTransmission}\PYG{p}{(}\PYG{n}{MD25ADDR}\PYG{p}{);}
    \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{write}\PYG{p}{(}\PYG{n}{CMD}\PYG{p}{);}
    \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{write}\PYG{p}{(}\PYG{n}{CLEARENCODERREGISTERS}\PYG{p}{);}
    \PYG{n}{Wire}\PYG{p}{.}\PYG{n}{endTransmission}\PYG{p}{();}
    \PYG{n}{delay}\PYG{p}{(}\PYG{l+m+mi}{50}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}

\PYG{c+c1}{// find the average distance travelled}
\PYG{k+kr}{inline} \PYG{k+kt}{int} \PYG{n+nf}{averageDistance}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// get individual wheel distances}
    \PYG{k+kt}{int} \PYG{n}{distLeft} \PYG{o}{=} \PYG{n}{individualDistance}\PYG{p}{(}\PYG{n}{ENCODELEFT}\PYG{p}{);}
    \PYG{k+kt}{int} \PYG{n}{distRight} \PYG{o}{=} \PYG{n}{individualDistance}\PYG{p}{(}\PYG{n}{ENCODERIGHT}\PYG{p}{);}

    \PYG{c+c1}{// find the absolute distance}
    \PYG{n}{distLeft} \PYG{o}{=} \PYG{n}{abs}\PYG{p}{(}\PYG{n}{distLeft}\PYG{p}{);}
    \PYG{n}{distRight} \PYG{o}{=} \PYG{n}{abs}\PYG{p}{(}\PYG{n}{distRight}\PYG{p}{);}

    \PYG{c+c1}{// return the average}
    \PYG{k}{return} \PYG{p}{(}\PYG{k+kt}{int}\PYG{p}{)((}\PYG{n}{distLeft} \PYG{o}{+} \PYG{n}{distRight}\PYG{p}{)}\PYG{o}{/} \PYG{l+m+mi}{2}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}

\PYG{c+cp}{\PYGZsh{}endif}
\end{Verbatim}
